//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace rvFleet.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class rvfleetEntities : DbContext
    {
        public rvfleetEntities()
            : base("name=rvfleetEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<archivofactura> archivofactura { get; set; }
        public virtual DbSet<conductorhistorico> conductorhistorico { get; set; }
        public virtual DbSet<detallefactura> detallefactura { get; set; }
        public virtual DbSet<facturas> facturas { get; set; }
        public virtual DbSet<kilometrajehistorico> kilometrajehistorico { get; set; }
        public virtual DbSet<proveedor> proveedor { get; set; }
        public virtual DbSet<rubrodetalle> rubrodetalle { get; set; }
        public virtual DbSet<rubros> rubros { get; set; }
        public virtual DbSet<sucursales> sucursales { get; set; }
        public virtual DbSet<ubicacionhistorica> ubicacionhistorica { get; set; }
        public virtual DbSet<vehiculos> vehiculos { get; set; }
        public virtual DbSet<kilometrajeporvehiculoanoactual> kilometrajeporvehiculoanoactual { get; set; }
        public virtual DbSet<recommendedmaintenance> recommendedmaintenance { get; set; }
        public virtual DbSet<usuarios> usuarios { get; set; }
        public virtual DbSet<vehiclecosts> vehiclecosts { get; set; }
        public virtual DbSet<vehiclefulldata> vehiclefulldata { get; set; }
    
        public virtual ObjectResult<GetPartsCost_Result> GetPartsCost(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPartsCost_Result>("GetPartsCost", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetVehicleAnualCostsGraphData_Result> GetVehicleAnualCostsGraphData(Nullable<int> yearFilter)
        {
            var yearFilterParameter = yearFilter.HasValue ?
                new ObjectParameter("YearFilter", yearFilter) :
                new ObjectParameter("YearFilter", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVehicleAnualCostsGraphData_Result>("GetVehicleAnualCostsGraphData", yearFilterParameter);
        }
    
        public virtual ObjectResult<GetVehicleCosts_Result> GetVehicleCosts(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVehicleCosts_Result>("GetVehicleCosts", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetVehicleGraphData_Result> GetVehicleGraphData(string vehPlaca)
        {
            var vehPlacaParameter = vehPlaca != null ?
                new ObjectParameter("VehPlaca", vehPlaca) :
                new ObjectParameter("VehPlaca", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVehicleGraphData_Result>("GetVehicleGraphData", vehPlacaParameter);
        }
    }
}
